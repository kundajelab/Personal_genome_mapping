import sys
import argparse
import os.path

desc = 'Creates genotype files for use in R code from the Seqphase output'
parser = argparse.ArgumentParser(description = desc)
parser.add_argument('mappref', help = 'Prefix of map and ped files. These should be named <map>_chrX.[map|ped].')
parser.add_argument('seqpref', help = 'Prefix of seqphase files. There should be one file <seqphase>chrX.txt for each chromosome.')
parser.add_argument('vcfpref', help = 'Prefix of VCF files, one for each chromosome.')
parser.add_argument('-o', '--outdir', help = 'Output directory', default = '')
args = parser.parse_args()

chroms = ['chr' + str(i) for i in range(1, 23)]
#chroms.append('chrX')

suf = '.san.txt'
files = {}
vcf_indivs = {}
indiv_list = []
removed = 0 # Number of non-bi-allelic SNPs that were removed
for c in chroms:
    snppos = {}
    
    # Read map file
    with open(args.mappref + c + '.map', 'r') as infile:
        for idx, line in enumerate(infile):
            fields = line.strip().split()
            pos = int(fields[3])
            snppos[pos] = idx # Map SNP position to index in the map (and seqphase files)
    map_pos = len(snppos)
    print >> sys.stderr, c, map_pos, 'SNPs in MAP'

    # Read ped file and find the index of each individual in that file
    indiv_ped_idx = {}
    with open(args.mappref + c + '.ped', 'r') as infile:
        for idx, line in enumerate(infile):
            fields = line.strip().split()
            if fields[0].startswith('SNYDER_HG19_'):
                 indiv_ped_idx[2 * idx] = fields[0] # Map index in the seqphase files to name of the individual

    mat_alleles = {} # Maps from names of individuals to maternal and paternal alleles
    pat_alleles = {}
    # Read the phased genotypes
    with open(args.seqpref + c + '.txt', 'r') as infile:
        for idx, line in enumerate(infile):
            if idx in indiv_ped_idx:
                alleles = line.strip().split()
                assert len(alleles) == map_pos
                pat_alleles[indiv_ped_idx[idx]] = alleles
            elif idx - 1 in indiv_ped_idx:
                alleles = line.strip().split()
                assert len(alleles) == map_pos
                mat_alleles[indiv_ped_idx[idx - 1]] = alleles

    # Read vcf file and keep track of SNP ids and ref allele
    vcf_lines = 0
    with open(args.vcfpref + c + '.dbsnp135.vcf', 'r') as infile:
        for line in infile:
            fields = line.strip().split()
            if fields[0] == '#CHROM':
                indivs_tmp = fields[9:]
                if len(files) == 0: # Files haven't been opened yet
                    indiv_list = indivs_tmp
                    # Open one file for each individual
                    for idx, i in enumerate(indivs_tmp):
                        if i in mat_alleles:
                            vcf_indivs[i] = 9 + idx # Column index
                            files[i] = open(os.path.join(args.outdir, i.replace('SNYDER_HG19_', '') + suf), 'w')
                            files[i].write('\t'.join(['#CHROM', 'POS', 'ID', 'REF', 'ALT', 'GENO']) + '\n')
                # Make sure the individuals are in the same order in all the files
                assert indivs_tmp == indiv_list
            elif not line.startswith('#'):
                vcf_lines = vcf_lines + 1
                assert c == fields[0]
                pos = int(fields[1])
                id = fields[2]
                if id == '.':
                    id = '%s_%d' %(c, pos)
                ref = fields[3]
                alt = fields[4]
                is_removed = False
                # Skip multi-allelic SNPs
                if len(alt.strip().split(',')) > 1:
                    removed = removed + 1
                    continue
                # Check all individuals to see if they agree on the alternative allele. Otherwise, skip SNP altogether.
                if pos in snppos:                
                    snp_idx = snppos[pos]
                    for i, idx in vcf_indivs.iteritems():
                        # This can happen because the map files were generated by merging the vcf files for 
                        # the San and GM19193 so sometimes the same SNP has different alternative alleles in
                        # the two VCFs and only one of them appears in the map.
                        if not mat_alleles[i][snp_idx] in [ref, alt] or not pat_alleles[i][snp_idx] in [ref, alt]:
                            removed = removed + 1
                            is_removed = True
                            break
                if is_removed:
                    continue
                for i, idx in vcf_indivs.iteritems():
                    if pos in snppos: # The VCF position is in the map
                        snp_idx = snppos[pos]
                        mat_gen = int(mat_alleles[i][snp_idx] != ref)
                        pat_gen = int(pat_alleles[i][snp_idx] != ref)
                        geno = '|'.join([str(pat_gen), str(mat_gen)])
                    else: # The VCF position won't be in the map if the position was mono-allelic
                        geno = fields[idx].split(':')[0].replace('/', '|')
                    files[i].write('\t'.join([c, str(pos), id, ref, alt, geno]) + '\n')
    print >> sys.stderr, c, vcf_lines, 'SNPs in VCF'

print >> sys.stderr, 'Removed', removed, 'non-bi-allelic SNPs' 
for f in files.keys():
    files[f].close()
